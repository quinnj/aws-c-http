name: Sync Fork with Upstream

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  # Also allow manual triggering
  workflow_dispatch:

# Add top-level permissions for all jobs
permissions:
  contents: write

jobs:
  sync-branch:
    name: Sync fork with upstream
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.PAT }}
      
      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/awslabs/aws-c-http.git
          git fetch upstream
      
      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      
      - name: Check for upstream changes
        id: check_changes
        run: |
          if git rev-list --count HEAD..upstream/main > /dev/null; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Merge upstream changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Try to merge, if there are conflicts, the workflow will fail
          git merge upstream/main
          git push origin main
        
  sync-releases:
    name: Sync releases with upstream
    runs-on: ubuntu-latest
    needs: sync-branch
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.PAT }}
      
      - name: Fetch upstream info
        run: |
          git remote add upstream https://github.com/awslabs/aws-c-http.git
          # Only fetch upstream info without fetching tags to avoid conflicts
          git fetch upstream --no-tags
      
      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      
      - name: Get latest upstream release tag
        id: latest_tag
        run: |
          # Get latest tag from upstream (by date, not by fetching the tag itself)
          LATEST_UPSTREAM_TAG=$(git ls-remote --tags --refs upstream | sort -t '/' -k 3 -V | tail -n 1 | awk -F/ '{print $3}')
          echo "Latest upstream tag: $LATEST_UPSTREAM_TAG"
          echo "latest_upstream_tag=$LATEST_UPSTREAM_TAG" >> $GITHUB_OUTPUT
          
          # Check if we already have this tag
          if git rev-parse -q --verify "refs/tags/$LATEST_UPSTREAM_TAG" >/dev/null 2>&1; then
            echo "Tag exists: $LATEST_UPSTREAM_TAG"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag does not exist locally: $LATEST_UPSTREAM_TAG"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create new tag if needed
        if: steps.latest_tag.outputs.latest_upstream_tag != '' && steps.latest_tag.outputs.tag_exists == 'false'
        run: |
          # Get tag name
          TAG_NAME="${{ steps.latest_tag.outputs.latest_upstream_tag }}"
          echo "Creating tag: $TAG_NAME"
          
          # Fetch specific tag from upstream
          git fetch upstream "refs/tags/$TAG_NAME:refs/tags/$TAG_NAME"
          
          # Push tag
          git push origin "$TAG_NAME"
      
      - name: Create matching GitHub release
        if: steps.latest_tag.outputs.latest_upstream_tag != '' && steps.latest_tag.outputs.tag_exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.latest_tag.outputs.latest_upstream_tag }}
          tag_name: ${{ steps.latest_tag.outputs.latest_upstream_tag }}
          body: |
            This is an auto-synced release to match upstream release ${{ steps.latest_tag.outputs.latest_upstream_tag }} from the official aws-c-http repository.
            
            Contains all the features of the upstream release, plus the custom features in this fork.
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}